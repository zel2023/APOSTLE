--- /Users/haoye.tian/Downloads/ODS/data/human_patches/Math_55/Vector3D/Math_55_Vector3D_s.java	2020-08-13 10:38:58.000000000 +0200
+++ /Users/haoye.tian/Downloads/ODS/data/human_patches/Math_55/Vector3D/Math_55_Vector3D_t.java	2020-08-13 10:38:58.000000000 +0200
@@ -456,9 +456,21 @@
    */
   public static Vector3D crossProduct(final Vector3D v1, final Vector3D v2) {
 
+      final double n1 = v1.getNormSq();
+      final double n2 = v2.getNormSq();
+      if ((n1 * n2) < MathUtils.SAFE_MIN) {
+          return ZERO;
+      }
 
       // rescale both vectors without losing precision,
       // to ensure their norm are the same order of magnitude
+      final int deltaExp = (FastMath.getExponent(n1) - FastMath.getExponent(n2)) / 4;
+      final double x1    = FastMath.scalb(v1.x, -deltaExp);
+      final double y1    = FastMath.scalb(v1.y, -deltaExp);
+      final double z1    = FastMath.scalb(v1.z, -deltaExp);
+      final double x2    = FastMath.scalb(v2.x,  deltaExp);
+      final double y2    = FastMath.scalb(v2.y,  deltaExp);
+      final double z2    = FastMath.scalb(v2.z,  deltaExp);
 
       // we reduce cancellation errors by preconditioning,
       // we replace v1 by v3 = v1 - rho v2 with rho chosen in order to compute
