--- /Users/haoye.tian/Downloads/ODS/data/human_patches/Math_64/LevenbergMarquardtOptimizer/Math_64_LevenbergMarquardtOptimizer_s.java	2020-08-13 10:38:58.000000000 +0200
+++ /Users/haoye.tian/Downloads/ODS/data/human_patches/Math_64/LevenbergMarquardtOptimizer/Math_64_LevenbergMarquardtOptimizer_t.java	2020-08-13 10:38:58.000000000 +0200
@@ -418,9 +427,15 @@
                         xNorm    += xK * xK;
                     }
                     xNorm = Math.sqrt(xNorm);
+                    current = new VectorialPointValuePair(point, objective);
 
                     // tests for convergence.
+                    if (checker != null) {
                     // we use the vectorial convergence checker
+                    	if (checker.converged(getIterations(), previous, current)) {
+                    		return current;
+                    	}
+                    }
                 } else {
                     // failed iteration, reset the previous values
                     cost = previousCost;
