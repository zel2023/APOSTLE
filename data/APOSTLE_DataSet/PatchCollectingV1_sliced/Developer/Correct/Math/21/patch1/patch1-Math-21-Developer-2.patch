--- /Users/haoye.tian/Downloads/ODS/data/human_patches/Math_21/RectangularCholeskyDecomposition/Math_21_RectangularCholeskyDecomposition_s.java	2020-08-13 10:38:58.000000000 +0200
+++ /Users/haoye.tian/Downloads/ODS/data/human_patches/Math_21/RectangularCholeskyDecomposition/Math_21_RectangularCholeskyDecomposition_t.java	2020-08-13 10:38:58.000000000 +0200
@@ -76,21 +75,24 @@
         for (boolean loop = true; loop;) {
 
             // find maximal diagonal element
-            swap[r] = r;
+            int swapR = r;
             for (int i = r + 1; i < order; ++i) {
                 int ii  = index[i];
-                int isi = index[swap[i]];
-                if (c[ii][ii] > c[isi][isi]) {
-                    swap[r] = i;
+                int isr = index[swapR];
+                if (c[ii][ii] > c[isr][isr]) {
+                    swapR = i;
                 }
             }
 
 
             // swap elements
-            if (swap[r] != r) {
-                int tmp = index[r];
-                index[r] = index[swap[r]];
-                index[swap[r]] = tmp;
+            if (swapR != r) {
+                final int tmpIndex    = index[r];
+                index[r]              = index[swapR];
+                index[swapR]          = tmpIndex;
+                final double[] tmpRow = b[r];
+                b[r]                  = b[swapR];
+                b[swapR]              = tmpRow;
             }
 
             // check diagonal element
