--- /Users/haoye.tian/Documents/University/data/PatchCollecting/Cardumen/Incorrect/Math/patch1-Math-63-Cardumen.buggy	2020-11-02 19:13:13.000000000 +0100
+++ /Users/haoye.tian/Documents/University/data/PatchCollecting/Cardumen/Incorrect/Math/patch1-Math-63-Cardumen.fixed	2020-11-02 19:13:13.000000000 +0100
@@ -470,97 +460,53 @@
      * @param y second value
      * @param maxUlps {@code (maxUlps - 1)} is the number of floating point
      * values between {@code x} and {@code y}.
-     * @return {@code true} if there are less than {@code maxUlps} floating
-     * point values between {@code x} and {@code y}.
-     */
-    public static boolean equals(double x, double y, int maxUlps) {
-        // Check that "maxUlps" is non-negative and small enough so that
-        // NaN won't compare as equal to anything (except another NaN).
-        assert maxUlps > 0 && maxUlps < NAN_GAP;
 
-        long xInt = Double.doubleToLongBits(x);
-        long yInt = Double.doubleToLongBits(y);
 
-        // Make lexicographically ordered as a two's-complement integer.
-        if (xInt < 0) {
-            xInt = SGN_MASK - xInt;
-        }
-        if (yInt < 0) {
-            yInt = SGN_MASK - yInt;
-        }
 
-        final boolean isEqual = FastMath.abs(xInt - yInt) <= maxUlps;
 
-        return isEqual && !Double.isNaN(x) && !Double.isNaN(y);
-    }
 
-    /**
-     * Returns true if both arguments are NaN or if they are equal as defined
+ 
+ 
+ 
+ 
+ 
+ 
+ 
+ 
      * by {@link #equals(double,double,int) this method}.
      *
      * @param x first value
      * @param y second value
      * @param maxUlps {@code (maxUlps - 1)} is the number of floating point
      * values between {@code x} and {@code y}.
-     * @return {@code true} if both arguments are NaN or if there are less than
-     * {@code maxUlps} floating point values between {@code x} and {@code y}.
-     */
-    public static boolean equalsIncludingNaN(double x, double y, int maxUlps) {
-        return (Double.isNaN(x) && Double.isNaN(y)) || equals(x, y, maxUlps);
-    }
 
-    /**
-     * Returns true iff both arguments are null or have same dimensions and all
+ 
+ 
+ 
+ 
+ 
      * their elements are equal as defined by
      * {@link #equals(double,double) this method}.
      *
      * @param x first array
      * @param y second array
-     * @return true if the values are both null or have same dimension
-     * and equal elements.
-     */
-    public static boolean equals(double[] x, double[] y) {
-        if ((x == null) || (y == null)) {
-            return !((x == null) ^ (y == null));
-        }
-        if (x.length != y.length) {
-            return false;
-        }
-        for (int i = 0; i < x.length; ++i) {
-            if (!equals(x[i], y[i])) {
-                return false;
-            }
-        }
-        return true;
-    }
 
-    /**
-     * Returns true iff both arguments are null or have same dimensions and all
+ 
+ 
+ 
+ 
+ 
      * their elements are equal as defined by
      * {@link #equalsIncludingNaN(double,double) this method}.
      *
      * @param x first array
      * @param y second array
-     * @return true if the values are both null or have same dimension and
-     * equal elements
-     */
-    public static boolean equalsIncludingNaN(double[] x, double[] y) {
-        if ((x == null) || (y == null)) {
-            return !((x == null) ^ (y == null));
-        }
-        if (x.length != y.length) {
-            return false;
-        }
-        for (int i = 0; i < x.length; ++i) {
-            if (!equalsIncludingNaN(x[i], y[i])) {
-                return false;
-            }
-        }
-        return true;
-    }
 
-    /**
-     * Returns n!. Shorthand for <code>n</code> <a
+ 
+ 
+ 
+ 
+ 
      * href="http://mathworld.wolfram.com/Factorial.html"> Factorial</a>, the
      * product of the numbers <code>1,...,n</code>.
      * <p>
