--- /Users/haoye.tian/Documents/University/data/PatchCollecting/Cardumen/Incorrect/Math/patch1-Math-63-Cardumen.buggy	2020-11-02 19:13:13.000000000 +0100
+++ /Users/haoye.tian/Documents/University/data/PatchCollecting/Cardumen/Incorrect/Math/patch1-Math-63-Cardumen.fixed	2020-11-02 19:13:13.000000000 +0100
@@ -681,37 +589,130 @@
      * @param q any number
      * @return the greatest common divisor, never negative
      * @throws ArithmeticException if the result cannot be represented as a
-     * nonnegative int value
-     * @since 1.1
-     */
-    public static int gcd(final int p, final int q) {
-        int u = p;
-        int v = q;
-        if ((u == 0) || (v == 0)) {
-            if ((u == Integer.MIN_VALUE) || (v == Integer.MIN_VALUE)) {
-                throw MathRuntimeException.createArithmeticException(
-                        LocalizedFormats.GCD_OVERFLOW_32_BITS,
-                        p, q);
-            }
-            return FastMath.abs(u) + FastMath.abs(v);
-        }
-        // keep u and v negative, as negative integers range down to
-        // -2^31, while positive numbers can only be as large as 2^31-1
-        // (i.e. we can't necessarily negate a negative number without
-        // overflow)
-        /* assert u!=0 && v!=0; */
-        if (u > 0) {
-            u = -u;
-        } // make u negative
-        if (v > 0) {
-            v = -v;
-        } // make v negative
-        // B1. [Find power of 2]
-        int k = 0;
-        while ((u & 1) == 0 && (v & 1) == 0 && k < 31) { // while u and v are
-                                                            // both even...
+ 
+ 
+ 
+ 
+ 
+ 
+ 
+ 
+ 
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+		(((((NAN_GAP) & 1) == 0) && (((NAN_GAP) & 1) == 0)) && ((NAN_GAP) < 31)) && (Double.isNaN(y))) || (x == y);} 	public static boolean equalsIncludingNaN(double x, double y) { 		return ((Double.isNaN(x)) && (Double.isNaN(y))) || (MathUtils.equals(x, y, 1));} 	public static boolean equals(double x, double y, double eps) { 		return (MathUtils.equals(x, y, 1)) || ((FastMath.abs((y - x))) <= eps);} 	public static boolean equalsIncludingNaN(double x, double y, double eps) { 		return (MathUtils.equalsIncludingNaN(x, y)) || ((FastMath.abs((y - x))) <= eps);} 	public static boolean equals(double x, double y, int maxUlps) { 		assert (maxUlps > 0) && (maxUlps < (MathUtils.NAN_GAP)); 		long xInt = java.lang.Double.doubleToLongBits(x); 		long yInt = java.lang.Double.doubleToLongBits(y); 		if (xInt < 0) { 			xInt = (MathUtils.SGN_MASK) - xInt;} 		if (yInt < 0) { 			yInt = (MathUtils.SGN_MASK) - yInt;} 		final boolean isEqual = (FastMath.abs((xInt - yInt))) <= maxUlps; 		return (isEqual && (!(Double.isNaN(x)))) && (!(Double.isNaN(y)));} 	public static boolean equalsIncludingNaN(double x, double y, int maxUlps) { 		return ((Double.isNaN(x)) && (Double.isNaN(y))) || (MathUtils.equals(x, y, maxUlps));} 	public static boolean equals(double[] x, double[] y) { 		if ((x == null) || (y == null)) { 			return !((x == null) ^ (y == null));} 		if ((x.length) != (y.length)) { 			return false;} 		for (int i = 0; i < (x.length); ++i) { 			if (!(MathUtils.equals(x[i], y[i]))) { 				return false;}} 		return true;} 	public static boolean equalsIncludingNaN(double[] x, double[] y) { 		if ((x == null) || (y == null)) { 			return !((x == null) ^ (y == null));} 		if ((x.length) != (y.length)) { 			return false;} 		for (int i = 0; i < (x.length); ++i) { 			if (!(MathUtils.equalsIncludingNaN(x[i], y[i]))) { 				return false;}} 		return true;} 	public static long factorial(final int n) { 		if (n < 0) { 			throw MathRuntimeException.createIllegalArgumentException(LocalizedFormats.FACTORIAL_NEGATIVE_PARAMETER, n);} 		if (n > 20) { 			throw new java.lang.ArithmeticException("factorial value is too large to fit in a long");} 		return MathUtils.FACTORIALS[n];} 	public static double factorialDouble(final int n) { 		if (n < 0) { 			throw MathRuntimeException.createIllegalArgumentException(LocalizedFormats.FACTORIAL_NEGATIVE_PARAMETER, n);} 		if (n < 21) { 			return MathUtils.factorial(n);} 		return FastMath.floor(((FastMath.exp(MathUtils.factorialLog(n))) + 0.5));} 	public static double factorialLog(final int n) { 		if (n < 0) { 			throw MathRuntimeException.createIllegalArgumentException(LocalizedFormats.FACTORIAL_NEGATIVE_PARAMETER, n);} 		if (n < 21) { 			return FastMath.log(MathUtils.factorial(n));} 		double logSum = 0; 		for (int i = 2; i <= n; i++) { 			logSum += FastMath.log(i);} 		return logSum;} 	public static int gcd(final int p, final int q) { 		int u = p; 		int v = q; 		if ((u == 0) || (v == 0)) { 			if ((u == (java.lang.Integer.MIN_VALUE)) || (v == (java.lang.Integer.MIN_VALUE))) { 				throw MathRuntimeException.createArithmeticException(LocalizedFormats.GCD_OVERFLOW_32_BITS, p, q);} 			return (FastMath.abs(u)) + (FastMath.abs(v));} 		if (u > 0) { 			u = -u;} 		if (v > 0) { 			v = -v;} 		int k = 0; 		while ((((u & 1) == 0) && ((v & 1) == 0)) && (k < 31)) {
+ 
             u /= 2;
             v /= 2;
+
             k++; // cast out twos.
         }
         if (k == 31) {
